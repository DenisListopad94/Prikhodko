# 1.	Напишите функцию которая будет генерировать список из 10 чисел степени 2 от 1 до 10.
print("Задание 1")
print([elem ** 2 for elem in range(1, 11)])
print("__________________")

# 2.	Напишите функцию которая будет генерировать список всех трёхзначных чисел кратных 5 и 3.
print("Задание 2")
print([elem for elem in range(100, 1000) if not elem % 3 and not elem % 5])
print("__________________")

# 3.	Программа получает на вход три числа через пробел — начало и конец диапазона, а также степень,
# в которую нужно возвести каждое число из диапазона. Напишите функцию которая сгенерирует и вернёт данный.
# Sample Input:
# 5 12 3
# Sample Output:
# 125 216 343 512 729 1000 1331 1728
print("Задание 3")
start, finish, degree = map(int, input().split())
print([elem ** degree for elem in range(start, finish + 1)])
print("__________________")

# 4.	Напишите функцию, на вход которой подаётся список чисел одной строкой.
# Программа должна для каждого элемента этого списка вывести сумму двух его соседей.
# Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка.
# Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
# Если на вход пришло только одно число, надо вывести его же. Вывод должен содержать одну строку с числами нового списка,
# разделёнными пробелом.
# Sample Input 1:
# 1 3 5 6 10
# Sample Output 1:
# 13 6 9 15 7
# Sample Input 2:
# 10
# Sample Output 2:
# 10
print("Задание 4")
numbers = [int(i) for i in input().split()]


def sum_of_the_neib():
    """Функция для вывода суммы соседей элементов списка.
     Принимает на вход числа, введенные с клавиатуры через пробел.
     Для строки с одним числом - выводит это число.
     Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка.
     """
    if len(numbers) == 1:
        print(numbers[0])
    else:
        for i in range(len(numbers)):
            if i == 0:
                print((numbers[1] + numbers[-1]), end=' ')
            elif i == len(numbers) - 1:
                print((numbers[i - 1] + numbers[0]))
            else:
                print((numbers[i - 1] + numbers[i + 1]), end=' ')


sum_of_the_neib()
print("__________________")

# 5.	Напишите функцию, для нахождения минимального элемента из 2 чисел. С помощью данной функции найдите минимальное четырёх чисел.
print("Задание 5")


def min_number(num1: int, num2: int) -> int:
    """Функция находит наименьшее из двух чисел.
    Аргументы функции: два числа.
    На выходе дает одно число.
         """
    if num1 < num2:
        return num1
    else:
        return num2


a = min_number(5, 7)
b = min_number(8, 10)
print(min(a, b))
print("__________________")

# 6.	Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2),
# вычисляющую расстояние между точкой (x1, y1) и (x2, y2). Считайте четыре действительных числа и выведите результат работы этой функции.
print("Задание 6")
from math import sqrt


def distance(x1: float, y1: float, x2: float, y2: float) -> float:
    """Функция вычисляет расстояние между точкой (x1, y1) и (x2, y2).
    Аргументы функции: четыре действительных числа, введенные с клавиатуры.
    На выходе дает одно число.
    """
    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)


x1 = float(input())
x2 = float(input())
y1 = float(input())
y2 = float(input())
print(distance(x1, x2, y1, y2))
print("__________________")

# 7.	Напишите функцию fib(n), которая по данному целому неотрицательному n возвращает n-e число Фибоначчи.
# Ищем число Фиббоначи через цикл! Рекурсию не использовать!
print("Задание 7")


def fib(n: int) -> int:
    """Функция находит число Фибоначчи для заданного числа.
    Аргументы функции: целое число.
    На выходе дает одно число.
    """
    a = 0
    b = 1
    for __ in range(n):
        a, b = b, a + b
    return a


print(fib(9))
print("__________________")

# 8.	Напишите реализацию функции closest_mod_5, принимающую в качестве единственного аргумента целое число x и возвращающую
# самое маленькое целое число y, такое что:
# -y больше или равно x
# -y делится нацело на 5
# 10 - > 10
# 12,14,13 ->15
print("Задание 8")


def closest_mod_5(x: int) -> int:
    """Функция находит число Фибоначчи для заданного числа.
    Аргументы функции: целое число.
    На выходе дает одно число.
    """
    if x % 5 == 0:
        return x
    else:
        return x + 5 - x % 5


print(closest_mod_5(84))
print("__________________")

# 9.	Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения,
# а чётные нацело делит на два. Функция не должна ничего возвращать, требуется только изменение переданного списка.
print("Задание 9")


def modify_list(l: list):
    """Функция принимает на вход список целых чисел, удаляет из него все нечётные значения, а чётные нацело делит на два.
    Аргументы функции: список чисел.
    На выходе дает список из чисел-результатов деления четных чисел на 2.
    """
    i = 0
    while i != len(l):
        if l[i] % 2 == 0:
            l[i] //= 2
            i += 1
        else:
            l.pop(i)


lst = [5, 4, 17, 9, 8, 10]
modify_list(lst)
print(lst)
print("__________________")

# 11.	*Сгенерировать список всех простых чисел до 100.
print("Доп задание 11")


def find_primes():
    """
    Функция выводит все простые числа в промежутке от 1 до 100.
    """
    primes = []
    for num in range(2, 100):
        for i in range(2, int(num / 2) + 1):
            if (num % i) == 0:
                break
        else:
            primes.append(num)
    return primes


print(find_primes())
