# Задачи на кортежи
# 1. Дан кортеж. Вывести все его совершенные числа.(6, 2, 7, 8)
# 6 = 1 + 2 + 3
# 28 = 1 + 2 + 4 + 7 + 14
print("Задание 1")
numbers = (6, 2, 7, 8)
for i in numbers:
    s = 1
    for j in range(2, i // 2 + 1):
        if i % j == 0:
            s += j
            if s == i:
                print(i)
print("_______________")

# 2. Дан кортеж. Написать программу, определяющую сколько раз менялся знак в кортеже.(5, 2, -2, 7, -8, -9, 1) 4 раза
print("Задание 2")
tup = (5, 2, -2, 7, -8, -9, 1)
counter = 0
negative = tup[0] < 0
for num in range(1, len(tup[1:]) + 1):
    if (tup[num] < 0) != negative:
        counter += 1
    negative = tup[num] < 0
print(counter)
print("_______________")

# Задачи на списки
# 3. Задано два списка. Найти наименьшие среди элементов первого списка, которые не входят во второй список или вывести что такого
# элемента нет.
# [4,1,6,9]  [8,1,2,4,9,5,7,6] -> нет такого элемента
print("Задание 3")
lst1 = [4, 1, 6, 9, 0, -55]
lst2 = [8, 1, 2, 4, 9, 5, 7, 6]
lst3 = list()
for number in lst1:
    if number not in lst2:
        lst3.append(number)
        print(min(lst3))
else:
    print("нет такого элемента")
print("_______________")
# Тут не понимаю, как сделать так, чтобы else не выводился после успешного выполнения if

# 4. Дан список положительных целых чисел . Вставить после каждого чётного числа его перевёртыш. Например для чисел:
# 18 -> 81,
# 42 -> 24,
# 8 ->  8,
# 122 -> 221
print("Задание 4")
numbers = [18, 42, 8]
for n in numbers:
    r = str(n)[::-1]
    print(n, "->", r)
    n += 1
print("_______________")

# 5. Дан список. Вычислить сколько раз в нем встречается каждый элемент, не используя сортировки. [5,2,4,5,1,2]
# 1 –> 1
# 2 –> 2
# 4 –> 1
# 5 –> 2
print("Задание 5")
nums = [5, 2, 4, 5, 1, 2]
for i in set(nums):
    print(i, "->", nums.count(i))
print("_______________")

# 6. Дан список, преобразуйте его, вставив 0 между числами.
# [7 4 1]
# Sample Output:
# 7 0 4 0 1
print("Задание 6")
n = [7, 4, 1]
print(" 0 ".join(map(str, n)))
print("_______________")
# Здесь в условии опечатка в списке: [7 4 1]? Нет запятых между эл-тами. Или так нужно?

# Задачи на множества
# 7. Во входной строке записана последовательность чисел через пробел.
# Для каждого числа выведите слово YES (в отдельной строке), если это число ранее встречалось в последовательности или NO,
# если не встречалось.
print("Задание 7")
numbers = [int(s) for s in input().split()]
occur_before = set()
print("Occurred before?")
for n in numbers:
    if n in occur_before:
        print(n, "YES")
    else:
        print(n, "NO")
        occur_before.add(n)
print("_______________")

# 8. Август и Беатриса играют в игру. Август загадал натуральное число от 1 до n.
# Беатриса пытается угадать это число, для этого она называет некоторые множества натуральных чисел.
# Август отвечает Беатрисе YES, если среди названных ей чисел есть задуманное или NO в противном случае.
# После нескольких заданных вопросов Беатриса запуталась в том, какие вопросы она задавала и какие ответы получила и просит вас помочь
# ей определить, какие числа мог задумать Август. В первой строке задано n - максимальное число, которое мог загадать Август.
# Далее каждая строка содержит вопрос Беатрисы (множество чисел, разделенных пробелом) и ответ Августа на этот вопрос.
# Вы должны вывести через пробел, в порядке возрастания, все числа, которые мог задумать Август.
print("Задание 8")
n = int(input("Max August's number is "))
a = set(range(1, n + 1))
for i in range(n):
    try:
        b = set([int(i) for i in input("Beatrice's guess: ").split()])
        c = input("August's answer: ")
    except ValueError:
        break
    if c == 'YES':
        a &= b
    else:
        a -= b
print(*sorted(a))

# Задачи на словари
# 9. Вам дан словарь, состоящий из пар слов. Каждое слово является синонимом к парному ему слову. Все слова в словаре различны.
# Для слова из словаря, записанного в последней строке, определите его синоним.
print("Задание 9")
synonyms = {}
for i in range(int(input("Количество пар синонимов: "))):
    words = input("Введите пары-синонимы через пробел: ").split()
    synonyms[words[0]] = words[1]
word = input("Введите слово, для которого нужно найти синоним: ")
for key in synonyms:
    if key == word:
        print(synonyms[key])
    if synonyms[key] == word:
        print(key)
print("_______________")

# 10.	Коля устал запоминать телефонные номера и заказал у Вас программу, которая заменила бы ему телефонную книгу.
# Коля может послать программе два вида запросов: строку, содержащую имя контакта и его номер, разделенные пробелом, или просто имя контакта.
# В первом случае программа должна добавить в книгу новый номер, во втором – вывести номер контакта.
# Ввод происходит до символа точки. Если введенное имя уже содержится в списке контактов, необходимо перезаписать номер.
# Sample Input:
# Ben 89001234050
# Alice 210-220
# Alice
# Alice 404-502
# Ben
# Nick
# Alice
# Robert 51234047129
#
# Sample Output:
# 210-220
# 89001234050
# +4(908)273-22-42
# 404-502
print("Задание 10")
phone_book = dict()
data = input()
while data != ".":
    data = data.split()
    if len(data) == 2:
        name, number = data
        phone_book[name] = number
    else:
        name = "".join(data)
        print(phone_book[name])
    data = input()
print("_______________")
# Не знаю как перенести вывод на новую строку. И для отсутствующего ключа выводит ошибку, тоже не смогла ничего сделать с этим.

# Дополнительные задачи на использование всех коллекций
# 1. Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз,
# чему равно). На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна отобразить программа.
# На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
# Sample Input:
# 7
# Sample Output:
# 1	2 2 3 3 3 4
print("Доп задание 1")
lst = []
n = int(input())
i = 1
while True:
    lst += [i] * i
    if len(lst) >= n:
        print(*lst[0:n])
        break
    i += 1
print("_______________")

# 2. Дан список. Перезаписать его так, чтобы сначала были все положительные числа, а затем все отрицательные и нули,
# сохраняя порядок их следования.
# [5,2,0,-2,-7,1,8,0,-1] -> [5,2,1,8,-2,-7,-1,0,0]

# 3. Дан список. Продублировать все неповторяющиеся элементы.
# [5,2,7,3,8,2,4,1,6,5] -> [5,2,7,7,3,3,8,8,2,4,4,1,1,6,6,5]

# 4. Римские цифры представлены семью различными символами:  I, V, X, L, C, D и M
#
# Символ        Значение
# I             1
# V             5
# X             10
# L             50
# C             100
# D             500
# M             1000
# Например,  2 пишется как II римскими цифрами, просто две сложенные вместе. 12 пишется как  XII, что просто X + II. Число 27 записывается как XXVII, то есть XX + V + II. Римские цифры обычно пишутся слева направо от большего к меньшему. Однако цифра «четыре» — не IIII. Вместо этого цифра четыре записывается как IV. Так как единица предшествует пятерке, мы вычитаем ее и получаем четыре. Тот же принцип применим к числу девять, которое записывается как IX. Есть шесть случаев, когда используется вычитание:
#
# I можно поставить перед V(5) и X(10), чтобы получилось 4 и 9.
# X можно поставить перед L(50) и C(100), чтобы получилось 40 и 90.
# C можно поставить перед D(500) и M(1000), чтобы получить 400 и 900.
# Дана римская цифра, преобразовать ее в целое число.
# Sample Input 1:
# III
# Sample Output 1:
# 3
# Sample Input 2:
# LVIII
# Sample Output 2:
# 58
# Sample Input 2:
# MCMXCIV
# Sample Output 2:
# 1994